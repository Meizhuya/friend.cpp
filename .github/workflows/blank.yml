#include<iostream>
using namespace std;
#include<string>

class Building
{//goodGay全局函数是 Building的好朋友 ，可以访问Building中私有成员
	friend	void goodGay(Building* building);//
public:
	Building()
	{
		m_SittingRoom = "客厅";
		m_BedRoom = "卧室";

	}
public:
	string m_SittingRoom;//客厅

private:
	string m_BedRoom;//卧室
};
//全局函数
void goodGay(Building * building)
{
	cout << "好基友的全局函数 访问" << building->m_SittingRoom << endl;
	cout << "好基友的全局函数 访问" << building->m_BedRoom << endl;
}
void test01()
{
	Building building;
	goodGay(  & building);

}

int main()
{
	

	system("pause");
	return 0;

}


类作友源
#include<iostream>
using namespace std;
#include<string>

class Buiiding;
class GoodGay
{
public:
	GoodGay();
	

	void visit();//参考函数 访问Building中的属性
	Building * building;

};
class Building
{
	friend class GoodGay;//goodGay是本类的好朋友
public:

	Building();
	
public:
	string  m_SittingRoom;//客厅
private:
	string m_BedRoom;//卧室
	 
};
//类外写成员函数
Building::Building()
{  
	m_SittingRoom = "客厅";

	m_BedRoom = "卧室";

}

GoodGay::GoodGay()
{
	//创建建筑物对象
	building = new Building;
}
void GoodGay::visit()
{
	cout << "好基友正在访问：" << building->m_SittingRoom << endl;
	cout << "好基友正在访问：" << building->m_BedRoom << endl;
 }
void test01()
{
	GoodGay g;
	g.visit();
}
int main()
{
	test01();

	system("pause");
	return 0;

}
